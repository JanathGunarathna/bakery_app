import React, { useState, useEffect, useCallback, useMemo } from "react";
import { firestore } from "../firebase";
import { addDoc, collection, getDocs, query, orderBy, doc, updateDoc, deleteDoc, where } from "firebase/firestore";

const SHOPS = ["Katuwawala","Koswatta","Arawwala","Depanama","Maharagama A","Maharagama B","Maharagama C" ];
const BAKERY_ITEMS = [
  "Normal bread", "Sandwich bread", "Half bread", "1/2 rose bread", "1/4 rose bread",
  "Tea bun", "Dagara bun", "Dot bun", "Cream bun", "Viyana Roll", "Jam bun",
  "Fish bun", "Sinisambol bun", "Othana Sausages", "Vegetable Bun", "Fish pastry",
  "Egg Pastry", "Sausages Pastry", "Fish Roll", "Egg Roll", "Vegetable Rotty",
  "Fish Rotty", "Chicken Pastry", "Wade", "patty -Vegetable", "Patty -fish",
  "Egg Bun", "Sausages Bun", "Hot dog", "Burger -Chicken", "Burger -Egg Bullseye",
  "Devel Sausages", "Omlet Bun", "Umbalakada Bun", "Semon Bun", "Fish finger",
  "Drumstick -Chicken", "Fish Cake", "Egg Pizza", "Sausages Pizza -cheese",
  "Sandwich -Egg", "Sandwich -fish", "Sandwich -Cheese", "string Hoppers",
  "Helapa", "Levaria", "Spanchi -Vanila", "Spanchi -Chocolate", "Cup Cake",
  "Daughnut", "Rock Bun", "Gnanakatha", "Pol Cake", "Swiss Roll", "Butter Cake",
  "100 Baby crush", "1/4 Side Rosed", "1/2 Side Rosed"
];

export default function SelectionPage() {
   const [isDarkMode, setIsDarkMode] = useState(() => {
    // Check for saved preference or default to light mode
    const savedMode = localStorage.getItem('bakery-theme');
    return savedMode === 'dark';
  });
  // Toggle dark mode
  const toggleDarkMode = useCallback(() => {
    setIsDarkMode(prev => {
      const newMode = !prev;
      localStorage.setItem('bakery-theme', newMode ? 'dark' : 'light');
      return newMode;
    });
  }, []);

  // State management
  const [inventoryData, setInventoryData] = useState([]);
  const [priceData, setPriceData] = useState([]);
  const [balanceData, setBalanceData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [editedItems, setEditedItems] = useState(new Set());
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [bakeryItems, setBakeryItems] = useState([...BAKERY_ITEMS]);
  const [downloadingPDF, setDownloadingPDF] = useState(false);
  
  // Filter states
  const [filters, setFilters] = useState({
    shop: SHOPS[0],
    date: new Date().toISOString().split('T')[0],
  });
  
  // UI state
  const [showNewItemForm, setShowNewItemForm] = useState(false);
  const [newItemName, setNewItemName] = useState("");
  const [showPriceManagement, setShowPriceManagement] = useState(false);
  const [editingPrices, setEditingPrices] = useState({});
  const [priceSubmitting, setPriceSubmitting] = useState(false);
  
  // Store current session changes
  const [sessionChanges, setSessionChanges] = useState({});
  
  // Opening and Closing Balance states
  const [openingBalance, setOpeningBalance] = useState(0);
  const [closingBalance, setClosingBalance] = useState(0);
  const [depositAmount, setDepositAmount] = useState(0);
  const [balanceEdited, setBalanceEdited] = useState(false);

   // Firestore collection references - SEPARATE COLLECTIONS
  const inventoryRef = collection(firestore, "inventory");
  const pricesRef = collection(firestore, "prices"); // Separate collection for prices
  
  // Mock functions
  const toggleDarkMode = useCallback(() => {
    setIsDarkMode(prev => !prev);
  }, []);

  const handleFilterChange = useCallback((field, value) => {
    setFilters(prev => ({ ...prev, [field]: value }));
  }, []);

  const navigateDate = useCallback((days) => {
    const currentDate = new Date(filters.date);
    const newDate = new Date(currentDate);
    newDate.setDate(newDate.getDate() + days);
    handleFilterChange('date', newDate.toISOString().split('T')[0]);
  }, [filters.date, handleFilterChange]);

  const handleCellEdit = useCallback((itemKey, field, value) => {
    const numValue = parseInt(value) || 0;
    setSessionChanges(prev => ({
      ...prev,
      [itemKey]: { ...prev[itemKey], [field]: numValue }
    }));
    setEditedItems(prev => new Set([...prev, itemKey]));
    setHasUnsavedChanges(true);
  }, []);

  const handleBalanceChange = useCallback((field, value) => {
    const numValue = parseFloat(value) || 0;
    if (field === 'openingBalance') {
      setOpeningBalance(numValue);
    } else if (field === 'depositAmount') {
      setDepositAmount(numValue);
    } else if (field === 'closingBalance') {
      setClosingBalance(numValue);
    }
    setBalanceEdited(true);
  }, []);

  const handleSaveBalance = useCallback(async () => {
    setBalanceEdited(false);
    alert("Balance saved successfully!");
  }, []);

  const handleSaveChanges = useCallback(async () => {
    setSubmitting(true);
    setTimeout(() => {
      setSubmitting(false);
      setHasUnsavedChanges(false);
      setEditedItems(new Set());
      setSessionChanges({});
      alert("Changes saved successfully!");
    }, 1000);
  }, []);

  const handleAddNewItem = useCallback(() => {
    if (newItemName.trim() && !bakeryItems.includes(newItemName.trim())) {
      setBakeryItems(prev => [...prev, newItemName.trim()]);
      setNewItemName("");
      setShowNewItemForm(false);
      alert("New item added successfully!");
    }
  }, [newItemName, bakeryItems]);

  const handlePriceEdit = useCallback((itemName, shop, price) => {
    const priceKey = `${shop}_${itemName}`;
    setEditingPrices(prev => ({
      ...prev,
      [priceKey]: { itemName, shop, price: parseFloat(price) || 0 }
    }));
  }, []);

  const handleSavePrices = useCallback(async () => {
    setPriceSubmitting(true);
    setTimeout(() => {
      setPriceSubmitting(false);
      setEditingPrices({});
      alert("Prices saved successfully!");
    }, 1000);
  }, []);

  // Create complete table data
  const completeTableData = useMemo(() => {
    return bakeryItems.slice(0, 10).map((itemName, index) => {
      const itemKey = `${filters.shop}_${filters.date}_${itemName}`;
      const changes = sessionChanges[itemKey] || {};
      
      const previousDayRemaining = 5 + Math.floor(Math.random() * 15);
      const morningInventory = changes.morningInventory || Math.floor(Math.random() * 25);
      const eveningInventory = changes.eveningInventory || Math.floor(Math.random() * 20);
      const extraIn = changes.extraIn || Math.floor(Math.random() * 5);
      const transferOut = changes.transferOut || Math.floor(Math.random() * 3);
      const discard = changes.discard || Math.floor(Math.random() * 2);
      const selling = changes.selling || Math.floor(Math.random() * 30);
      
      const addedInventory = morningInventory + eveningInventory + extraIn;
      const startingInventory = previousDayRemaining + addedInventory;
      const availableForSale = startingInventory - transferOut - discard;
      const remainingInventory = availableForSale - selling;
      const price = 10 + Math.random() * 20;
      const totalValue = selling * price;
      
      return {
        id: itemKey,
        itemName,
        shop: filters.shop,
        date: filters.date,
        previousDayRemaining,
        morningInventory,
        eveningInventory,
        extraIn,
        addedInventory,
        startingInventory,
        transferOut,
        discard,
        availableForSale,
        selling,
        remainingInventory,
        price,
        totalValue,
        hasChanges: !!changes,
        hasPriceMissing: false
      };
    });
  }, [bakeryItems, filters, sessionChanges]);

  const totalSalesValue = useMemo(() => {
    return completeTableData.reduce((sum, item) => sum + item.totalValue, 0);
  }, [completeTableData]);

  // Auto-calculate closing balance
  useEffect(() => {
    if (!balanceEdited) {
      setClosingBalance(openingBalance + totalSalesValue - depositAmount);
    }
  }, [openingBalance, totalSalesValue, depositAmount, balanceEdited]);

  const generatePDFReport = useCallback(async () => {
    setDownloadingPDF(true);
    
    const totalMorning = completeTableData.reduce((sum, item) => sum + item.morningInventory, 0);
    const totalEvening = completeTableData.reduce((sum, item) => sum + item.eveningInventory, 0);
    const totalExtra = completeTableData.reduce((sum, item) => sum + item.extraIn, 0);
    const totalTransferOut = completeTableData.reduce((sum, item) => sum + item.transferOut, 0);
    const totalDiscard = completeTableData.reduce((sum, item) => sum + item.discard, 0);
    const totalSold = completeTableData.reduce((sum, item) => sum + item.selling, 0);
    const totalRemaining = completeTableData.reduce((sum, item) => sum + item.remainingInventory, 0);

    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>T&S Bakery Sales Report</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
          .header { text-align: center; margin-bottom: 30px; border-bottom: 2px solid #ddd; padding-bottom: 20px; }
          .header h1 { color: #1e3a8a; margin: 0 0 10px 0; font-size: 24px; }
          .balance-section { background: #f0f9ff; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
          .balance-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; }
          .balance-item { background: white; padding: 15px; border-radius: 6px; text-align: center; }
          .balance-value { font-size: 18px; font-weight: bold; color: #0369a1; }
          .summary { background: #f8fafc; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
          .summary-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 15px; }
          table { width: 100%; border-collapse: collapse; font-size: 10px; }
          th, td { padding: 6px 4px; border: 1px solid #e2e8f0; }
          th { background: #f1f5f9; font-weight: bold; }
          .text-center { text-align: center; }
          .text-right { text-align: right; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>T & S Bakery - Daily Sales Report</h1>
          <h2>${filters.shop} - ${filters.date}</h2>
        </div>
        
        <div class="balance-section">
          <h3>Daily Cash Balance</h3>
          <div class="balance-grid">
            <div class="balance-item">
              <div class="balance-value">Rs. ${openingBalance.toFixed(2)}</div>
              <div>Opening Balance</div>
            </div>
            <div class="balance-item">
              <div class="balance-value">Rs. ${totalSalesValue.toFixed(2)}</div>
              <div>Total Sales Value</div>
            </div>
            <div class="balance-item">
              <div class="balance-value">Rs. ${depositAmount.toFixed(2)}</div>
              <div>Deposit Amount</div>
            </div>
            <div class="balance-item">
              <div class="balance-value">Rs. ${closingBalance.toFixed(2)}</div>
              <div>Closing Balance</div>
            </div>
          </div>
        </div>
        
        <div class="summary">
          <h3>Inventory Summary</h3>
          <div class="summary-grid">
            <div style="text-align: center; background: white; padding: 15px; border-radius: 6px;">
              <div style="font-size: 18px; font-weight: bold;">${totalMorning}</div>
              <div>Morning Added</div>
            </div>
            <div style="text-align: center; background: white; padding: 15px; border-radius: 6px;">
              <div style="font-size: 18px; font-weight: bold;">${totalEvening}</div>
              <div>Evening Added</div>
            </div>
            <div style="text-align: center; background: white; padding: 15px; border-radius: 6px;">
              <div style="font-size: 18px; font-weight: bold;">${totalExtra}</div>
              <div>Extra In</div>
            </div>
            <div style="text-align: center; background: white; padding: 15px; border-radius: 6px;">
              <div style="font-size: 18px; font-weight: bold;">${totalSold}</div>
              <div>Total Sold</div>
            </div>
          </div>
        </div>
        
        <table>
          <thead>
            <tr>
              <th>Item Name</th>
              <th class="text-center">Prev Day</th>
              <th class="text-center">Morning</th>
              <th class="text-center">Evening</th>
              <th class="text-center">Extra In</th>
              <th class="text-center">Starting</th>
              <th class="text-center">Transfer Out</th>
              <th class="text-center">Discard</th>
              <th class="text-center">Available</th>
              <th class="text-center">Sold</th>
              <th class="text-center">Remaining</th>
              <th class="text-right">Price</th>
              <th class="text-right">Value</th>
            </tr>
          </thead>
          <tbody>
            ${completeTableData.map(item => `
              <tr>
                <td>${item.itemName}</td>
                <td class="text-center">${item.previousDayRemaining}</td>
                <td class="text-center">${item.morningInventory}</td>
                <td class="text-center">${item.eveningInventory}</td>
                <td class="text-center">${item.extraIn}</td>
                <td class="text-center">${item.startingInventory}</td>
                <td class="text-center">${item.transferOut}</td>
                <td class="text-center">${item.discard}</td>
                <td class="text-center">${item.availableForSale}</td>
                <td class="text-center">${item.selling}</td>
                <td class="text-center">${item.remainingInventory}</td>
                <td class="text-right">${item.price.toFixed(2)}</td>
                <td class="text-right">${item.totalValue.toFixed(2)}</td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      </body>
      </html>
    `;
    
    setTimeout(() => {
      const printWindow = window.open('', '_blank');
      printWindow.document.write(htmlContent);
      printWindow.document.close();
      printWindow.onload = function() {
        setTimeout(() => {
          printWindow.print();
          printWindow.close();
        }, 500);
      };
      setDownloadingPDF(false);
    }, 1000);
  }, [completeTableData, filters, openingBalance, closingBalance, depositAmount, totalSalesValue]);

  return (
    <div className={`min-h-screen transition-colors duration-300 ${
      isDarkMode 
        ? 'bg-gradient-to-br from-gray-900 via-slate-900 to-gray-800' 
        : 'bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100'
    }`}>
      <div className="container mx-auto px-4 py-6 max-w-full">
        {/* Header */}
        <header className="text-center mb-8">
          <div className="flex justify-between items-center mb-4">
            <div className="flex-1"></div>
            <h1 className={`text-4xl md:text-5xl font-bold bg-gradient-to-r ${
              isDarkMode 
                ? 'from-blue-400 to-indigo-400' 
                : 'from-blue-600 to-indigo-600'
            } bg-clip-text text-transparent mb-3`}>
              T & S Bakery Inventory
            </h1>
            <div className="flex-1 flex justify-end">
              <button
                onClick={toggleDarkMode}
                className={`p-3 rounded-full transition-all duration-300 ${
                  isDarkMode 
                    ? 'bg-yellow-500 hover:bg-yellow-400 text-gray-900' 
                    : 'bg-gray-800 hover:bg-gray-700 text-yellow-400'
                } shadow-lg hover:shadow-xl transform hover:scale-110`}
                title={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}
              >
                {isDarkMode ? '☀️' : '🌙'}
              </button>
            </div>
          </div>
          <p className={`text-lg ${isDarkMode ? 'text-slate-300' : 'text-slate-600'}`}>
            Enhanced daily inventory tracking with morning/evening entries, transfers, and cash balance
          </p>
        </header>

        {/* Filters Section */}
        <section className={`backdrop-blur-sm rounded-xl shadow-lg border p-6 mb-6 transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gray-800/80 border-gray-700/20' 
            : 'bg-white/80 border-white/20'
        }`}>
          <h2 className={`text-lg font-semibold mb-4 flex items-center gap-2 ${
            isDarkMode ? 'text-slate-200' : 'text-slate-800'
          }`}>
            Select Shop & Date
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 items-end">
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Select Shop:
              </label>
              <select 
                value={filters.shop} 
                onChange={(e) => handleFilterChange('shop', e.target.value)}
                className={`w-full border rounded-lg px-3 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-slate-200' 
                    : 'bg-white border-slate-300 text-slate-700'
                }`}
              >
                {SHOPS.map((shop) => (
                  <option key={shop} value={shop}>{shop}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Select Date:
              </label>
              <div className="flex gap-2">
                <button
                  onClick={() => navigateDate(-1)}
                  className={`px-3 py-2.5 rounded-lg transition-colors ${
                    isDarkMode 
                      ? 'bg-slate-700 hover:bg-slate-600 text-slate-300' 
                      : 'bg-slate-200 hover:bg-slate-300 text-slate-700'
                  }`}
                >
                  ←
                </button>
                <input
                  type="date"
                  value={filters.date}
                  onChange={(e) => handleFilterChange('date', e.target.value)}
                  className={`flex-1 border rounded-lg px-3 py-2.5 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-slate-200' 
                      : 'bg-white border-slate-300 text-slate-700'
                  }`}
                />
                <button
                  onClick={() => navigateDate(1)}
                  className={`px-3 py-2.5 rounded-lg transition-colors ${
                    isDarkMode 
                      ? 'bg-slate-700 hover:bg-slate-600 text-slate-300' 
                      : 'bg-slate-200 hover:bg-slate-300 text-slate-700'
                  }`}
                >
                  →
                </button>
              </div>
            </div>
            
            <div className="flex gap-2 flex-wrap">
              <button
                onClick={() => handleFilterChange('date', new Date().toISOString().split('T')[0])}
                className="px-4 py-2.5 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors text-sm"
              >
                Today
              </button>
              <button
                onClick={() => setShowPriceManagement(!showPriceManagement)}
                className="px-4 py-2.5 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors text-sm"
              >
                Prices
              </button>
              <button
                onClick={generatePDFReport}
                disabled={downloadingPDF}
                className="px-4 py-2.5 bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white rounded-lg transition-all duration-200 font-medium disabled:opacity-50 text-sm flex items-center gap-2"
              >
                {downloadingPDF ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    🖨️ Print Report
                  </>
                )}
              </button>
              {hasUnsavedChanges && (
                <button
                  onClick={handleSaveChanges}
                  disabled={submitting}
                  className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-4 py-2.5 rounded-lg hover:shadow-lg transition-all duration-200 font-medium disabled:opacity-50 text-sm"
                >
                  {submitting ? "Saving..." : "Save Changes"}
                </button>
              )}
            </div>
          </div>
        </section>

        {/* Opening/Closing Balance Section */}
        <section className={`backdrop-blur-sm rounded-xl shadow-lg border p-6 mb-6 transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gray-800/80 border-gray-700/20' 
            : 'bg-white/80 border-white/20'
        }`}>
          <div className="flex justify-between items-center mb-4">
            <h2 className={`text-lg font-semibold flex items-center gap-2 ${
              isDarkMode ? 'text-slate-200' : 'text-slate-800'
            }`}>
              Daily Cash Balance - {filters.shop}
            </h2>
            {balanceEdited && (
              <button
                onClick={handleSaveBalance}
                className="bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-200 font-medium text-sm"
              >
                Save Balance
              </button>
            )}
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Opening Balance (Rs.):
              </label>
              <input
                type="number"
                step="0.01"
                value={openingBalance}
                onChange={(e) => handleBalanceChange('openingBalance', e.target.value)}
                className={`w-full border rounded-lg px-3 py-2.5 focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-colors duration-300 ${
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-slate-200' 
                    : 'bg-white border-slate-300'
                }`}
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Total Sales Value (Rs.):
              </label>
              <div className={`w-full border rounded-lg px-3 py-2.5 ${
                isDarkMode 
                  ? 'bg-gray-600 border-gray-500 text-slate-200' 
                  : 'bg-gray-100 border-slate-300 text-slate-600'
              }`}>
                {totalSalesValue.toFixed(2)} (Auto-calculated)
              </div>
            </div>
            
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Deposit Amount (Rs.):
              </label>
              <input
                type="number"
                step="0.01"
                value={depositAmount}
                onChange={(e) => handleBalanceChange('depositAmount', e.target.value)}
                className={`w-full border rounded-lg px-3 py-2.5 focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-colors duration-300 ${
                  isDarkMode 
                    ? 'bg-gray-700 border-gray-600 text-slate-200' 
                    : 'bg-white border-slate-300'
                }`}
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDarkMode ? 'text-slate-300' : 'text-slate-700'
              }`}>
                Closing Balance (Rs.):
              </label>
              <div className={`w-full border-2 rounded-lg px-3 py-2.5 font-bold ${
                isDarkMode 
                  ? 'bg-green-900/30 border-green-700 text-green-300' 
                  : 'bg-green-50 border-green-300 text-green-700'
              }`}>
                {closingBalance.toFixed(2)} (Auto-calculated)
              </div>
            </div>
          </div>
          
          <div className={`mt-4 text-sm ${isDarkMode ? 'text-slate-400' : 'text-slate-600'}`}>
            Formula: Closing Balance = Opening Balance + Sales Value - Deposit Amount
          </div>
        </section>

        {/* Price Management Section */}
        {showPriceManagement && (
          <section className={`backdrop-blur-sm rounded-xl shadow-lg border p-6 mb-6 transition-colors duration-300 ${
            isDarkMode 
              ? 'bg-gray-800/80 border-gray-700/20' 
              : 'bg-white/80 border-white/20'
          }`}>
            <div className="flex justify-between items-center mb-4">
              <h2 className={`text-lg font-semibold ${
                isDarkMode ? 'text-slate-200' : 'text-slate-800'
              }`}>
                Price Management - {filters.shop}
              </h2>
              <div className="flex gap-2">
                {Object.keys(editingPrices).length > 0 && (
                  <button
                    onClick={handleSavePrices}
                    disabled={priceSubmitting}
                    className="bg-gradient-to-r from-green-500 to-emerald-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-200 font-medium disabled:opacity-50 text-sm"
                  >
                    {priceSubmitting ? "Saving..." : `Save ${Object.keys(editingPrices).length} Price(s)`}
                  </button>
                )}
                <button
                  onClick={() => setShowPriceManagement(false)}
                  className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                    isDarkMode 
                      ? 'bg-slate-600 text-white hover:bg-slate-500' 
                      : 'bg-slate-500 text-white hover:bg-slate-600'
                  }`}
                >
                  Close
                </button>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 max-h-96 overflow-y-auto">
              {bakeryItems.slice(0, 15).map(itemName => {
                const priceKey = `${filters.shop}_${itemName}`;
                const editingPrice = editingPrices[priceKey];
                const displayPrice = editingPrice ? editingPrice.price : (10 + Math.random() * 20).toFixed(2);
                
                return (
                  <div key={itemName} className={`rounded-lg border p-3 transition-colors duration-300 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600' 
                      : 'bg-white border-slate-200'
                  }`}>
                    <div className={`font-medium text-sm mb-2 truncate ${
                      isDarkMode ? 'text-slate-200' : 'text-slate-800'
                    }`} title={itemName}>
                      {itemName}
                    </div>
                    <div className="flex items-center gap-2">
                      <span className={`text-xs ${
                        isDarkMode ? 'text-slate-400' : 'text-slate-600'
                      }`}>Rs.</span>
                      <input
                        type="number"
                        step="0.01"
                        min="0"
                        value={displayPrice || ''}
                        onChange={(e) => handlePriceEdit(itemName, filters.shop, e.target.value)}
                        className={`flex-1 text-sm border rounded px-2 py-1 focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-colors duration-300 ${
                          editingPrice 
                            ? (isDarkMode ? 'border-purple-500 bg-purple-900/20 text-slate-200' : 'border-purple-400 bg-purple-50')
                            : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                        }`}
                        placeholder="0.00"
                      />
                    </div>
                  </div>
                );
              })}
            </div>
          </section>
        )}

        {/* Add New Item Section */}
        <section className={`backdrop-blur-sm rounded-xl shadow-lg border p-6 mb-6 transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gray-800/80 border-gray-700/20' 
            : 'bg-white/80 border-white/20'
        }`}>
          <div className="flex justify-between items-center mb-4">
            <h2 className={`text-lg font-semibold ${
              isDarkMode ? 'text-slate-200' : 'text-slate-800'
            }`}>
              Manage Items
            </h2>
            <button
              onClick={() => setShowNewItemForm(!showNewItemForm)}
              className="bg-gradient-to-r from-emerald-500 to-teal-500 text-white px-4 py-2 rounded-lg hover:shadow-lg transition-all duration-200 text-sm"
            >
              {showNewItemForm ? "Cancel" : "Add New Item"}
            </button>
          </div>
          
          {showNewItemForm && (
            <div className="flex gap-2 items-end">
              <div className="flex-1">
                <label className={`block text-sm font-medium mb-2 ${
                  isDarkMode ? 'text-slate-300' : 'text-slate-700'
                }`}>
                  New Item Name:
                </label>
                <input
                  type="text"
                  value={newItemName}
                  onChange={(e) => setNewItemName(e.target.value)}
                  placeholder="Enter new bakery item name"
                  className={`w-full border rounded-lg px-3 py-2.5 focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-colors duration-300 ${
                    isDarkMode 
                      ? 'bg-gray-700 border-gray-600 text-slate-200' 
                      : 'bg-white border-slate-300'
                  }`}
                />
              </div>
              <button
                onClick={handleAddNewItem}
                className={`px-4 py-2.5 rounded-lg transition-colors ${
                  isDarkMode 
                    ? 'bg-emerald-600 hover:bg-emerald-700' 
                    : 'bg-emerald-600 hover:bg-emerald-700'
                } text-white`}
              >
                Add Item
              </button>
            </div>
          )}
        </section>

        {/* Enhanced Inventory Table Section */}
        <section className={`backdrop-blur-sm rounded-xl shadow-xl border overflow-hidden transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gray-800/90 border-gray-700/20' 
            : 'bg-white/90 border-white/20'
        }`}>
          <div className={`p-6 border-b ${
            isDarkMode ? 'border-slate-700' : 'border-slate-200'
          }`}>
            <h2 className={`text-xl font-semibold flex items-center gap-2 ${
              isDarkMode ? 'text-slate-200' : 'text-slate-800'
            }`}>
              Enhanced Daily Inventory - {filters.shop} - {filters.date}
            </h2>
            <p className={`text-sm mt-1 ${
              isDarkMode ? 'text-slate-400' : 'text-slate-600'
            }`}>
              Complete inventory view with morning/evening entries, transfers, and discards
              {hasUnsavedChanges && (
                <span className={`ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  isDarkMode 
                    ? 'bg-yellow-900/50 text-yellow-300' 
                    : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {editedItems.size} unsaved changes
                </span>
              )}
              <span className={`ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                isDarkMode 
                  ? 'bg-green-900/50 text-green-300' 
                  : 'bg-green-100 text-green-800'
              }`}>
                Total Sales: Rs. {totalSalesValue.toFixed(2)}
              </span>
            </p>
          </div>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className={`sticky top-0 transition-colors duration-300 ${
                isDarkMode ? 'bg-slate-800' : 'bg-slate-50'
              }`}>
                <tr>
                  <th className={`px-3 py-4 text-left text-xs font-semibold min-w-[160px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Item Name
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Prev Day<br/>Remain
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Morning<br/>Time
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Evening<br/>Time
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Extra<br/>In
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Starting<br/>Total
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Transfer<br/>Out (-)
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Discard<br/>(-)
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Available<br/>for Sale
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Items<br/>Sold
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[80px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Remaining<br/>Inventory
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[70px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Price<br/>(Rs.)
                  </th>
                  <th className={`px-2 py-4 text-center text-xs font-semibold min-w-[90px] ${
                    isDarkMode ? 'text-slate-300' : 'text-slate-700'
                  }`}>
                    Total Value<br/>(Rs.)
                  </th>
                </tr>
              </thead>
              <tbody className={`divide-y transition-colors duration-300 ${
                isDarkMode ? 'divide-slate-700' : 'divide-slate-200'
              }`}>
                {completeTableData.map((row, index) => {
                  const hasData = row.morningInventory > 0 || row.eveningInventory > 0 || row.extraIn > 0 || 
                                  row.transferOut > 0 || row.discard > 0 || row.selling > 0;
                  const isEdited = editedItems.has(row.id);
                  
                  return (
                    <tr 
                      key={row.id} 
                      className={`transition-colors duration-150 ${
                        hasData 
                          ? (isDarkMode ? 'bg-blue-900/20 hover:bg-blue-800/30' : 'bg-blue-50/50 hover:bg-blue-100/50')
                          : (isDarkMode ? 'hover:bg-slate-800/50' : 'hover:bg-slate-50')
                      } ${isEdited 
                        ? (isDarkMode ? 'bg-yellow-900/20 border-yellow-700' : 'bg-yellow-50 border-yellow-200') 
                        : ''
                      }`}
                    >
                      <td className={`px-3 py-3 text-xs font-medium ${
                        isDarkMode ? 'text-slate-200' : 'text-slate-800'
                      }`}>
                        <div className="flex items-center gap-2">
                          <span className={`w-2 h-2 rounded-full ${
                            hasData ? 'bg-blue-500' : 
                            isEdited ? 'bg-yellow-500' :
                            (isDarkMode ? 'bg-slate-600' : 'bg-slate-300')
                          }`}></span>
                          <span title={row.itemName} className="truncate">
                            {row.itemName}
                          </span>
                        </div>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          isDarkMode 
                            ? 'bg-gray-700 text-gray-300' 
                            : 'bg-gray-100 text-gray-800'
                        }`}>
                          {row.previousDayRemaining}
                        </span>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.morningInventory}
                          onChange={(e) => handleCellEdit(row.id, 'morningInventory', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.eveningInventory}
                          onChange={(e) => handleCellEdit(row.id, 'eveningInventory', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.extraIn}
                          onChange={(e) => handleCellEdit(row.id, 'extraIn', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          isDarkMode 
                            ? 'bg-blue-900/50 text-blue-300' 
                            : 'bg-blue-100 text-blue-800'
                        }`}>
                          {row.startingInventory}
                        </span>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.transferOut}
                          onChange={(e) => handleCellEdit(row.id, 'transferOut', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-red-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.discard}
                          onChange={(e) => handleCellEdit(row.id, 'discard', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-red-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          row.availableForSale > 0 
                            ? (isDarkMode ? 'bg-indigo-900/50 text-indigo-300' : 'bg-indigo-100 text-indigo-800')
                            : (isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800')
                        }`}>
                          {row.availableForSale}
                        </span>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <input
                          type="number"
                          value={row.selling}
                          onChange={(e) => handleCellEdit(row.id, 'selling', e.target.value)}
                          className={`w-16 text-center border rounded px-1 py-1 text-xs focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors duration-300 ${
                            isEdited 
                              ? (isDarkMode ? 'border-yellow-500 bg-yellow-900/20 text-slate-200' : 'border-yellow-400 bg-yellow-50')
                              : (isDarkMode ? 'border-gray-600 bg-gray-800 text-slate-200' : 'border-slate-300')
                          }`}
                          min="0"
                          max={row.availableForSale}
                          placeholder="0"
                        />
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          row.remainingInventory > 0 
                            ? (isDarkMode ? 'bg-emerald-900/50 text-emerald-300' : 'bg-emerald-100 text-emerald-800')
                            : row.remainingInventory === 0 
                              ? (isDarkMode ? 'bg-yellow-900/50 text-yellow-300' : 'bg-yellow-100 text-yellow-800')
                              : (isDarkMode ? 'bg-red-900/50 text-red-300' : 'bg-red-100 text-red-800')
                        }`}>
                          {row.remainingInventory}
                        </span>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          isDarkMode 
                            ? 'bg-purple-900/50 text-purple-300' 
                            : 'bg-purple-100 text-purple-800'
                        }`}>
                          {row.price.toFixed(2)}
                        </span>
                      </td>
                      
                      <td className="px-2 py-3 text-xs text-center">
                        <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                          row.totalValue > 0 
                            ? (isDarkMode ? 'bg-green-900/50 text-green-300' : 'bg-green-100 text-green-800')
                            : (isDarkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800')
                        }`}>
                          {row.totalValue.toFixed(2)}
                        </span>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </section>

        {/* Enhanced Summary Section */}
        <section className={`backdrop-blur-sm rounded-xl shadow-lg border p-6 mt-6 transition-colors duration-300 ${
          isDarkMode 
            ? 'bg-gray-800/80 border-gray-700/20' 
            : 'bg-white/80 border-white/20'
        }`}>
          <h2 className={`text-lg font-semibold mb-4 ${
            isDarkMode ? 'text-slate-200' : 'text-slate-800'
          }`}>
            Enhanced Daily Summary
          </h2>
          
          <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4">
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-blue-900/30' : 'bg-blue-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-blue-400' : 'text-blue-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.morningInventory, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-blue-300' : 'text-blue-700'
              }`}>Morning Added</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-indigo-900/30' : 'bg-indigo-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-indigo-400' : 'text-indigo-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.eveningInventory, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-indigo-300' : 'text-indigo-700'
              }`}>Evening Added</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-cyan-900/30' : 'bg-cyan-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-cyan-400' : 'text-cyan-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.extraIn, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-cyan-300' : 'text-cyan-700'
              }`}>Extra In</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-red-900/30' : 'bg-red-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-red-400' : 'text-red-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.transferOut, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-red-300' : 'text-red-700'
              }`}>Transfer Out</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-pink-900/30' : 'bg-pink-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-pink-400' : 'text-pink-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.discard, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-pink-300' : 'text-pink-700'
              }`}>Discarded</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-orange-900/30' : 'bg-orange-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-orange-400' : 'text-orange-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.selling, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-orange-300' : 'text-orange-700'
              }`}>Total Sold</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg transition-colors duration-300 ${
              isDarkMode ? 'bg-emerald-900/30' : 'bg-emerald-50'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-emerald-400' : 'text-emerald-600'
              }`}>
                {completeTableData.reduce((sum, item) => sum + item.remainingInventory, 0)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-emerald-300' : 'text-emerald-700'
              }`}>Remaining</div>
            </div>
            
            <div className={`text-center p-4 rounded-lg border-2 transition-colors duration-300 ${
              isDarkMode 
                ? 'bg-green-900/30 border-green-700' 
                : 'bg-green-50 border-green-200'
            }`}>
              <div className={`text-xl font-bold ${
                isDarkMode ? 'text-green-400' : 'text-green-600'
              }`}>
                Rs. {totalSalesValue.toFixed(2)}
              </div>
              <div className={`text-xs ${
                isDarkMode ? 'text-green-300' : 'text-green-700'
              }`}>Total Sales Value</div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}
